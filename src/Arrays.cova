let nums = [1 2 3]
local nums2 = [1..100];

local odd = nums2 for (n, i) where n % 2 != 0
local every-other = nums2 for (n, i) where i % 2 != 0

let sum = nums for n fold 0 + n
let sumPlusOneEach = nums for n fold 0 + (n + 1)

let product = nums for n fold 1 * n

let reversed = nums[^]

let first = nums[0]// for n get 1
let last = nums[^1] for n get ^1

let min = nums map .min

let isTwoInRange = 2 >< nums

let strings = nums for .toString()

let appended = [1 2 3] fold n -> "" + n.toString()

let csv = nums for n map n -> n.toString(), map x -> ',' >< x ? `"{x}"` : x , join ','

Env.writeLine(csv);

local rows =
	[
		[1, "john", "smith"]
		[2, "jane", "doe"]
		[7, "ned", "flanders"]
	]

rows for row -> row map .to-string map x { ',' >< x ? `"{x}"` : x } join ',' for Env.writeLine

rows for row
	row map .to-string map x
		',' >< x then `"{x}"` else x
	join ','
	for Env.writeLine

nums map n { n.to-string() } for s -> Env.writeLine(s)
nums map .to-string map x { ',' >< x ? `"{x}"` : x } join ',' for Env.writeLine

func addOne(n Int) => n + 1

let plusOnes = nums map addOne
let plusThrees = nums map 3 addOne
let plusThrees = nums map addOne addOne addOne

func average(numbers... Int) => numbers for n fold 0 + n / numbers.count
let avg = [1 3 6 8 5] fold average


type Foo
	+func Bar Bool => true

type Baz is Foo
	+func Bar




qual System
	type ForwardIterable<T> trait +
		func getIterator() ForwardIterator<T> +

	type BackwardIterable<T> trait +
		func getIterator() BackwardIterator<T> +

	type ForwardIterator<T> trait +
		func current T +
		func next() Boolean +

	type BackwardIterator<T> trait +
		func current T +
		func next() Boolean +

	type Iterator<T> trait is ForwardIterator<T> & BackwardIterator<T> +

	type Range<T> trait +

qual System
	type Vector<T> ++
		field count @ Size +-
		field data * Array<T> +

		init +
			count = 0
			data = []

		fini
			// do nothing?

		prop this[index @ Size] ++
			get => data[index]
			set => data[index] = value

		prop this[index @ Size] + => data[index]

		prop this[index @ Size] +
			data[index]

		func push(element T) +
			count += 1
			if count > data.count
				data = new Array<T>(count.bits.leadingZeroCount)
			data[^1] = element